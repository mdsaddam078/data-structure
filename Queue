 #include<iostream.h>
 #include<stdlib.h>
 #include<conio.h>
 #define size 5
 
 struct queue
 {
  int que[size];
  int front,rear;
 }Q;
 
 int queueFull()
  {
  if(Q.rear >=size-1)
   return 1;
  else
   return 0;
 }
 
 int queueEmpty()
 {
  if((Q.front == - 1) || (Q.front > Q.rear))
   return 1;
 else
   return 0;
 }
 
 int insert_item(int item)
 {
   if(Q.front == -1)
     Q.front++;
   Q.que[++Q.rear] = item;
   return Q.rear;
 }
 
 
 int delete_item()
 {
  int item;
  item = Q.que[Q.front];
  Q.front++;
  cout<<"\n The delete_itemd item is "<<item;
  return Q.front;
 }
 
 void display()
 {
   int i;
   for(i=Q.front;i<=Q.rear;i++)
     cout<<"   "<<Q.que[i];
 }
 
 
 int main()
 {
  int ch,item;
 
  clrscr();
  Q.front = -1;
  Q.rear  = -1;
 
  cout<<"\n Queue Implementation";
  do
  {
  cout<<"\n\n Main Menu";
  cout<<"\n 1 : Insert";
  cout<<"\n 2 : Delete";
  cout<<"\n 3 : Display";
  cout<<"\n 4 : Exit";
 
  cout<<"\n Select Operation : ";
  cin>>ch;
 
 switch(ch)
 {
 case 1:
  if(queueFull())
  {
   cout<<"\n Cannot insert the element";
  }
  else
  {
   cout<<"\n Enter the number to be inserted : ";
   cin>>item;
   insert_item(item);
  }
   break;
 
 case 2:
   if(queueEmpty())
   {
     cout<<"\n Queue is Empty";
   }
   else
   {
     delete_item();
   }
   break;
 
 case 3:
     if(queueEmpty())
     { cout<<"\nQueue Is Empty"; }
     else
     { display(); }
     break;
 
 case 4 :
     cout<<"\n End of Program...";
 
     }
 
   }while(ch!=4);
 
 return 0;
 
 }
 
 /*
